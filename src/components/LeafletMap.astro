---
// Leaflet CSS and dependencies will be loaded dynamically
import type { FeatureCollection, Geometry, GeoJsonProperties } from "geojson"

export interface Props {
  latitude: number
  longitude: number
  zoom: number
  /** URL del tileLayer, ver: https://leafletjs.com/reference.html#tilelayer */
  tileLayer: string
  /** Atribución requerida por la mayoría de tile servers */
  attribution: string
  geoJSON?: { data: FeatureCollection<Geometry, GeoJsonProperties>; color: string }[]
}

const { latitude, longitude, zoom, tileLayer, attribution, geoJSON } = Astro.props
---

<leaflet-map
  class="block h-full"
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-tiles={tileLayer}
  data-attribution={attribution}
  data-geojson={JSON.stringify(geoJSON)}
>
</leaflet-map>

<script>
  class LeafletMap extends HTMLElement {
    private observer: IntersectionObserver | null = null
    private initialized = false

    connectedCallback() {
      // Create an intersection observer to detect when the map is about to be visible
      this.observer = new IntersectionObserver(this.handleIntersection.bind(this), {
        rootMargin: "200px", // Load when map is within 200px of viewport
        threshold: 0,
      })

      this.observer.observe(this)
    }

    disconnectedCallback() {
      // Clean up the observer when the element is removed from the DOM
      if (this.observer) {
        this.observer.disconnect()
        this.observer = null
      }
    }

    async handleIntersection(entries: IntersectionObserverEntry[]) {
      const isIntersecting = entries[0]?.isIntersecting

      if (isIntersecting && !this.initialized) {
        this.initialized = true

        // Stop observing once we've initialized
        if (this.observer) {
          this.observer.disconnect()
          this.observer = null
        }

        // Dynamically load Leaflet CSS
        await this.loadLeafletCSS()

        // Dynamically import Leaflet
        const leafletModule = await import("leaflet")
        const L = leafletModule.default

        // Initialize the map
        await this.initializeMap(L)
      }
    }

    async loadLeafletCSS() {
      return new Promise<void>((resolve) => {
        const link = document.createElement("link")
        link.rel = "stylesheet"
        link.href = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        link.integrity = "sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
        link.crossOrigin = ""

        link.onload = () => {
          // Add custom CSS for the pink color theme after Leaflet CSS is loaded
          this.addCustomStyles()
          resolve()
        }
        document.head.appendChild(link)
      })
    }

    addCustomStyles() {
      // Add the custom CSS for the pink color theme
      const style = document.createElement("style")
      style.textContent = `
        .leaflet-tile {
          filter: hue-rotate(220deg);
        }

        .leaflet-pane {
          z-index: 10;
        }

        .leaflet-top {
          z-index: 11;
        }

        .leaflet-control-zoom.leaflet-bar.leaflet-control {
          border-radius: 24px;
          overflow: hidden;
          margin: 14px;
          border-color: var(--color-primary);
        }

        a.leaflet-control-zoom-in,
        a.leaflet-control-zoom-out {
          background-color: var(--color-primary-light);
          color: var(--color-primary);
          border-color: var(--color-primary);
        }

        a.leaflet-control-zoom-in:hover,
        a.leaflet-control-zoom-out:hover {
          background-color: var(--color-primary);
          color: white;
          border-color: var(--color-primary-light);
        }
      `
      document.head.appendChild(style)
    }

    async initializeMap(L: any) {
      const { latitude, longitude, zoom, tiles, attribution, geojson } = this.dataset
      const latlng = [Number(latitude), Number(longitude)]

      const map = L.map(this, {
        scrollWheelZoom: false,
        dragging: false,
        attributionControl: true,
      }).setView(latlng, Number(zoom))

      // Habilitar interactividad al hacer clic
      map.once("click", () => {
        map.scrollWheelZoom.enable()
        map.dragging.enable()
      })

      L.tileLayer(tiles as string, { attribution }).addTo(map)

      // Definir icono personalizado
      const myIcon = L.icon({
        iconUrl: "images/icons/marker.webp",
        iconSize: [25, 36],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41],
      })

      L.marker(latlng, { icon: myIcon }).addTo(map).bindPopup("Aquopolis Villanueva de la Cañada")

      if (!geojson) return

      const geoJSONData = JSON.parse(geojson as string)
      geoJSONData.forEach(({ data, color }: { data: any; color: string }) => {
        L.geoJSON(data, {
          style: { color, weight: 5, opacity: 0.65 },
        }).addTo(map)
      })
    }
  }

  window.customElements.define("leaflet-map", LeafletMap)
</script>

<!-- Styles are now added dynamically in JavaScript -->
