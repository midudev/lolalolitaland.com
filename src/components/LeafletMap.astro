---
import "leaflet/dist/leaflet.css";

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  /** ID del elemento contenedor */
  container: string;
  /** URL del tileLayer, ver: https://leafletjs.com/reference.html#tilelayer */
  tileLayer: string;
  /** Atribución requerida por la mayoría de tile servers */
  attribution: string;
  containerstyle?: string;
}

const {
  latitude,
  longitude,
  zoom,
  container,
  tileLayer,
  attribution,
  containerstyle = "height: 61.8vh",
} = Astro.props;
---

<leaflet-map
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-container={container}
  data-tiles={tileLayer}
  data-attribution={attribution}
  data-containerstyle={containerstyle}
>
  <div id={container} style={containerstyle}></div>
</leaflet-map>

<script>
  import "leaflet";

  if (!window.customElements.get("leaflet-map")) {
    class LeafletMap extends HTMLElement {
      connectedCallback() {
        const { latitude, longitude, zoom, container, tiles, attribution } =
          this.dataset;
        const latlng = [Number(latitude), Number(longitude)];

        const map = window.L.map(container, {
          scrollWheelZoom: false,
          dragging: false,
        }).setView(latlng, Number(zoom));

        // Habilitar interactividad al hacer clic
        map.once("click", () => {
          map.scrollWheelZoom.enable();
          map.dragging.enable();
        });

        window.L.tileLayer(tiles, { attribution }).addTo(map);

        // Definir icono personalizado
        const myIcon = window.L.icon({
          iconUrl: "images/icons/marker.png",
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
          shadowSize: [41, 41],
        });

        window.L.marker(latlng, { icon: myIcon })
          .addTo(map)
          .bindPopup("Aquopolis Villanueva de la Cañada");
      }
    }
    window.customElements.define("leaflet-map", LeafletMap);
  }
</script>
