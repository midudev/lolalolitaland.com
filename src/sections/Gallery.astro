---
import { galleryImages } from "@/consts/galleryImages"

import { Image } from "astro:assets"
import WaveSeparator from "@/components/WaveSeparator.astro"
---

<WaveSeparator bottomColor="var(--color-theme-blue)" />

<section class="bg-theme-blue px-6 py-16 lg:px-8">
  <div class="mx-auto max-w-6xl" id="gallery">
    <h2 class="mb-2 block p-4 text-center text-lg font-bold text-white lg:text-4xl xl:text-5xl">
      ¡Así fue el año pasado!
    </h2>
    <h3 class="block pb-20 text-center text-lg font-bold text-white opacity-80">
      Aquí tienes algunos recuerdos de la primera edición de LolaLolita Land
    </h3>
    <ul
      class="grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 [&>*:nth-child(even)]:rotate-2 [&>*:nth-child(n)]:hover:scale-105 [&>*:nth-child(n)]:hover:rotate-0 [&>*:nth-child(n)]:hover:shadow-xl [&>*:nth-child(odd)]:rotate-[-2deg]"
    >
      {
        galleryImages.map(({ image, alt, thumb }, index) => (
          <li
            id={thumb}
            class="cursor-pointer bg-white px-2.5 pt-2.5 pb-14 shadow-sm transition-transform duration-300 will-change-transform"
            data-index={index}
          >
            <div class="aspect-1/1 w-full overflow-hidden">
              <Image
                src={image}
                alt={alt}
                data-thumbID={thumb}
                class="h-full w-full object-cover"
              />
            </div>
          </li>
        ))
      }
    </ul>
  </div>
  <div
    class="pointer-events-none fixed inset-0 flex cursor-pointer items-center justify-center p-4 opacity-0 transition-opacity duration-300 ease-in-out"
    role="dialog"
    aria-modal="true"
    id="lightbox"
  >
    <div class="relative w-full max-w-5xl p-4">
      <button
        type="button"
        id="close-lightbox"
        class="hover:text-primary absolute top-1 -right-16 z-[999999] cursor-pointer rounded-full bg-white p-2.5 text-gray-700 transition-all duration-300 ease-in will-change-transform hover:scale-125 sm:top-6 sm:right-6 md:top-8 md:right-8"
      >
        <span class="sr-only">Cerrar Galería</span>
        <svg
          class="size-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          aria-hidden="true"
          data-slot="icon"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
        </svg>
      </button>

      <figure id="light-box-content"></figure>
    </div>
  </div>
</section>

<WaveSeparator bottomColor="var(--color-primary)" />

<script>
  const galleryItems = Array.from(
    document.querySelectorAll("#gallery li img")
  ) as HTMLImageElement[]
  const lightBox = document.getElementById("lightbox") as HTMLDivElement
  const lightBoxImgContainer = document.getElementById("light-box-content") as HTMLDivElement
  const btnCloseLightBox = document.getElementById("close-lightbox") as HTMLButtonElement

  let currentIndex = 0

  const openLightBox = (index: number) => {
    if (index < 0 || index >= galleryItems.length) return
    currentIndex = index
    const image = galleryItems[index].cloneNode() as HTMLImageElement
    image.style.viewTransitionName = ""
    lightBoxImgContainer.innerHTML = ""
    lightBoxImgContainer.appendChild(image)
    lightBox.classList.remove("opacity-0", "pointer-events-none")
    lightBox.classList.add(
      "bg-[#ff0693a4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )

    document.body.style.overflow = "hidden"
  }

  const closeLightBox = () => {
    lightBox.classList.add("opacity-0", "pointer-events-none")
    lightBox.classList.remove(
      "bg-[#ff0693a4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )

    lightBoxImgContainer.innerHTML = "" // Elimina la imagen ampliada
    document.body.style.overflow = "" // Restaurar scroll
  }

  const navigateLightBox = (direction: number) => {
    let newIndex = currentIndex + direction
    if (newIndex < 0 || newIndex >= galleryItems.length) return

    openLightBox(newIndex)
  }

  galleryItems.forEach((image, index) => {
    image.addEventListener("click", () => {
      if (!document.startViewTransition) {
        openLightBox(index)
        return
      }

      galleryItems.forEach((img) => {
        img.style.viewTransitionName = ""
      })

      image.style.viewTransitionName = "selected-img"

      document.startViewTransition(() => {
        openLightBox(index)
      })
    })
  })

  const handleClose = async () => {
    if (!lightBoxImgContainer.querySelector("img")) return

    if (!document.startViewTransition) {
      closeLightBox()
      return
    }

    const animation = document.startViewTransition(() => {
      closeLightBox()
    })

    await animation.finished
  }

  lightBox.addEventListener("click", handleClose)
  btnCloseLightBox.addEventListener("click", (event) => {
    event.stopPropagation()
    handleClose()
  })

  document.addEventListener("keydown", async (event) => {
    if (event.key === "Escape") {
      await handleClose()
    } else if (event.key === "ArrowRight") {
      navigateLightBox(1)
    } else if (event.key === "ArrowLeft") {
      navigateLightBox(-1)
    }
  })
</script>
