---
import GlowingEffect from "@/components/GlowingEffect.astro"
import { galleryImages } from "@/consts/galleryImages"
import { Image } from "astro:assets"
---

<section class="bg-theme-blue px-6 py-16 lg:px-8">
  <div class="mx-auto max-w-6xl" id="gallery">
    <h2 class="mb-2 block p-4 text-center text-lg font-bold text-white lg:text-4xl xl:text-5xl">
      ¡Así fue el año pasado!
    </h2>
    <h3 class="block pb-20 text-center text-lg font-bold text-white opacity-80">
      Aquí tienes algunos recuerdos de la primera edición de LolaLolita Land
    </h3>
    <ul
      class="grid grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 [&>*:nth-child(even)]:rotate-2 [&>*:nth-child(n)]:hover:scale-105 [&>*:nth-child(n)]:hover:rotate-0 [&>*:nth-child(n)]:hover:shadow-xl [&>*:nth-child(odd)]:rotate-[-2deg]"
    >
      {
        galleryImages.map(({ image, alt, thumb }) => (
          <li
            id={thumb}
            class="aspect-9/10 cursor-pointer rounded-md shadow-sm transition-transform duration-300 will-change-transform"
          >
            <GlowingEffect
              spread={40}
              proximity={64}
              inactiveZone={0.01}
              borderWidth={2}
              color="var(--color-theme-blue-light)"
            />
            <Image
              src={image}
              alt={alt}
              width={950}
              height={900}
              data-thumbID={thumb}
              class="border-theme-blue-light h-full w-full rounded-md border border-dashed object-cover"
              loading="lazy"
            />
          </li>
        ))
      }
    </ul>
  </div>
  <div
    class="pointer-events-none fixed inset-0 flex cursor-pointer items-center justify-center p-4 opacity-0 transition-opacity duration-300 ease-in-out"
    role="dialog"
    aria-modal="true"
    id="lightbox"
  >
    <div class="relative w-full max-w-5xl p-4">
      <button
        type="button"
        id="close-lightbox"
        class="hover:text-primary absolute -top-8 -right-1 -m-2.5 cursor-pointer rounded-full bg-white p-2.5 text-gray-700 transition-all duration-300 ease-in will-change-transform hover:scale-125"
      >
        <span class="sr-only">Cerrar Galería</span>
        <svg
          class="size-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          aria-hidden="true"
          data-slot="icon"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
        </svg>
      </button>

      <figure id="light-box-content"></figure>
    </div>
  </div>
</section>

<script>
  const galleryItems = document.querySelectorAll("#gallery li img") as NodeListOf<HTMLImageElement>
  const lightBox = document.getElementById("lightbox") as HTMLDivElement
  const lightBoxImgContainer = document.getElementById("light-box-content") as HTMLDivElement
  const btnCloseLightBox = document.getElementById("close-lightbox") as HTMLButtonElement

  const openLightBox = (image: HTMLImageElement) => {
    lightBoxImgContainer.appendChild(image)
    lightBox.classList.remove("opacity-0", "pointer-events-none")
    lightBox.classList.add(
      "bg-[#ff0693a4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )

    document.body.style.overflow = "hidden"
  }
  const closeLightBox = (image: HTMLImageElement) => {
    lightBox.classList.add("opacity-0", "pointer-events-none")
    lightBox.classList.remove(
      "bg-[#ff0693a4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )
    const galleryParentID = image.getAttribute("data-thumbID")
    const galleryParent = document.getElementById(`${galleryParentID}`) as HTMLLIElement
    galleryParent.appendChild(image)

    lightBoxImgContainer.innerHTML = "" // Elimina la imagen ampliada
    document.body.style.overflow = "" // Restaurar scroll
  }

  galleryItems.forEach((eachItem) => {
    eachItem.addEventListener("click", (event) => {
      const image = event.target as HTMLImageElement
      if (!document.startViewTransition) {
        openLightBox(image)
        return
      }

      image.style.viewTransitionName = "selected-img"
      document.startViewTransition(() => {
        openLightBox(image)
      })
    })
  })

  lightBox.addEventListener("click", async () => {
    const image = lightBoxImgContainer.querySelector("img") as HTMLImageElement
    if (!document.startViewTransition) {
      closeLightBox(image)
      return
    }

    const animation = document.startViewTransition(() => {
      closeLightBox(image)
    })

    await animation.finished
    image.style.viewTransitionName = "none"
  })

  btnCloseLightBox.addEventListener("click", async (event) => {
    event.stopPropagation()
    const image = btnCloseLightBox.nextElementSibling!.querySelector("img") as HTMLImageElement
    if (!document.startViewTransition) {
      closeLightBox(image)
      return
    }

    const animation = document.startViewTransition(() => {
      closeLightBox(image)
    })

    await animation.finished
    image.style.viewTransitionName = "none"
  })

  document.addEventListener("keydown", async (event) => {
    if (event.key === "Escape") {
      const image = lightBoxImgContainer.querySelector("img") as HTMLImageElement

      if (!document.startViewTransition) {
        closeLightBox(image)
        return
      }

      const animation = document.startViewTransition(() => {
        closeLightBox(image)
      })

      await animation.finished
      image.style.viewTransitionName = "none"
    }
  })
</script>
